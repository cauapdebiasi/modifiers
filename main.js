/*
 *  ATIVIDADE FINALIZADA
 *  Projeto orientado a objetos que visa demonstrar o funcionamento da troca de marchas
 *  de um veÃ­culo (caminhÃ£o) com um sistema de transmissÃ£o automÃ¡tico
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * Classe VeÃ­culo (genÃ©rica)
 * Representa as caracterÃ­sticas presentes na maioria dos veÃ­culos
 */
var Vehicle = /** @class */ (function () {
    function Vehicle(model, wheels, axles, capacity) {
        this.model = model;
        this.wheels = wheels;
        this.axles = axles;
        this.capacity = capacity;
        this._km = 0;
    }
    return Vehicle;
}());
/**
 * Classe Caixa de cÃ¢mbio
 * Representa as caracterÃ­sticas e mÃ©todos tradicionais presentes nas caixas de cÃ¢mbio
 */
var GearBox = /** @class */ (function () {
    function GearBox(model, _gears) {
        this.model = model;
        this._gears = _gears;
        this.MAX_SHIFTS = 15; // Limite total de trocas para cada troca de Ã³leo
        this._totalShifts = 0; // Contagem do total de trocas de marcha desde a Ãºltima troca de Ã³leo
        this._gear = 0; // -1 = RÃ© e 0 = Neutro ... vai atÃ© o limite definido pela quantidade de marchas no construtor pelo parÃ¢metro _gears
        this._oilState = "new"; // Estado atual do Ã³leo
    }
    /**
     * LÃ³gica de troca de marcha, se aplica a ambas as funÃ§Ãµes shift (passar) e unshift (voltar)
     * realiza as verificaÃ§Ãµes referente as condiÃ§Ãµes do Ã³leo e atualiza o estado da instÃ¢ncia
     *
     */
    GearBox.prototype.shift = function () {
        if (!this._validGear(this._gear + 1))
            return;
        if (!this._shouldShift())
            console.log("LÃ¡ se vÃ£o as engrenagens ğŸ’¨");
        this._totalShifts++;
        this._gear++;
        this._updateOilState();
        console.log("Subiu para a marcha ".concat(this._gear, " \uD83D\uDD3A"));
    };
    /**
     * LÃ³gica de troca de marcha, se aplica a ambas as funÃ§Ãµes shift (passar) e unshift (voltar)
     * realiza as verificaÃ§Ãµes referente as condiÃ§Ãµes do Ã³leo e atualiza o estado da instÃ¢ncia
     *
     */
    GearBox.prototype.unshift = function () {
        if (!this._validGear(this._gear - 1))
            return;
        if (!this._shouldShift())
            console.log("LÃ¡ se vÃ£o as engrenagens ğŸ’¨");
        this._totalShifts++;
        this._gear--;
        this._updateOilState();
        console.log("Reduziu para a marcha ".concat(this._gear, " \uD83D\uDD3B"));
    };
    /**
     * Realiza a "troca de Ã³leo" da caixa, resetando o estado da condiÃ§Ã£o do Ã³leo
     */
    GearBox.prototype.changeOil = function () {
        this._totalShifts = 0;
        this._updateOilState();
        console.log("Ã“leo trocado!ğŸ’§");
    };
    /**
     * Atualiza o estado do Ã³leo baseado na quantidade de trocas totais
     */
    GearBox.prototype._updateOilState = function () {
        if (this._totalShifts > 10) {
            this._oilState = "bad";
            return;
        }
        if (this._totalShifts > 5) {
            this._oilState = "good";
            return;
        }
        this._oilState = "new";
    };
    /**
     * VerificaÃ§Ã£o bÃ¡sica para garantir que nÃ£o seja possÃ­vel colocar uma marcha maior que o limite e menor que a rÃ©
     */
    GearBox.prototype._validGear = function (nextGear) {
        return nextGear < this._gears || nextGear >= -1;
    };
    /**
     * VerificaÃ§Ã£o das condiÃ§Ãµes do Ã³leo na hora da troca
     * Entra em pÃ¢nico caso a prÃ³xima troca ultrapasse o limite
     */
    GearBox.prototype._shouldShift = function () {
        if (this._totalShifts > this.MAX_SHIFTS)
            throw 'TA PEGANU FOGO BIXO ğŸ’¥ğŸ’¥';
        if (this._oilState === "bad")
            return false;
        return true;
    };
    /**
     *
     * Retorna a marcha atualmente selecionada
     */
    GearBox.prototype.currentGear = function () {
        return this._gear;
    };
    return GearBox;
}());
/**
 * Classe CaminhÃ£o
 * Representa o caminhÃ£o final atravÃ©s da heranÃ§a e da composiÃ§Ã£o das outras classes
 * tambÃ©m representa a interface de um caminhÃ£o real jÃ¡ que abstrai algumas partes
 * do funcionamento interno
 */
var Truck = /** @class */ (function (_super) {
    __extends(Truck, _super);
    function Truck(model, wheels, axles, capacity) {
        var _this = _super.call(this, model, wheels, axles, capacity) || this;
        _this._gearBox = new GearBox("gr905", 12);
        console.log("\uD83D\uDE9B ".concat(model, " de ").concat(axles, " eixos foi instanciado"));
        return _this;
    }
    /**
     * Chama o mÃ©todo de troca da caixa de marcha
     */
    Truck.prototype.shift = function () {
        this._gearBox.shift();
    };
    /**
     * Chama o mÃ©todo de troca da caixa de marcha
     */
    Truck.prototype.unshift = function () {
        this._gearBox.unshift();
    };
    /**
     * Exibe qual a marcha atual selecionada de forma mais amigÃ¡vel para ser exibida no painel
     */
    Truck.prototype.displayCurrentGear = function () {
        var currentGear = this._gearBox.currentGear();
        switch (currentGear) {
            case -1:
                console.log("R");
                break;
            case 0:
                console.log("N");
                break;
            default:
                console.log(currentGear);
        }
    };
    /**
     * Fornece uma ponte para que um mÃ³dulo externo consiga se acoplar no caminhÃ£o e ter acesso
     * as informaÃ§Ãµes da caixa de marcha
     */
    Truck.prototype.accessGearBox = function () {
        return this._gearBox;
    };
    return Truck;
}(Vehicle));
/**
 * Exemplo de uso
 */
var truck = new Truck("Scania", 6, 3, 2); // ğŸš› Scania de 3 eixos foi instanciado
truck.shift(); // Subiu para a marcha 1
truck.shift(); // Subiu para a marcha 2
truck.shift(); // Subiu para a marcha 3
truck.shift(); // Subiu para a marcha 4
truck.shift(); // Subiu para a marcha 5
truck.unshift(); // Reduziu para a marcha 4 
truck.unshift(); // Reduziu para a marcha 3
truck.shift(); // Subiu para a marcha 4
truck.shift(); // Subiu para a marcha 5
truck.unshift; // Reduziu para a marcha 4
truck.unshift(); // Reduziu para a marcha 3
// LÃ¡ se vÃ£o as engrenagens ğŸ’¨
truck.unshift(); // Reduziu para a marcha 2
// LÃ¡ se vÃ£o as engrenagens ğŸ’¨
truck.unshift(); // Reduziu para a marcha 1
// LÃ¡ se vÃ£o as engrenagens ğŸ’¨
truck.shift(); // Subiu para a marcha 2
// LÃ¡ se vÃ£o as engrenagens ğŸ’¨
truck.shift(); // Subiu para a marcha 3
// LÃ¡ se vÃ£o as engrenagens ğŸ’¨
truck.shift(); // Subiu para a marcha 4
// LÃ¡ se vÃ£o as engrenagens ğŸ’¨
truck.unshift(); // Reduziu para a marcha 3 
// LÃ¡ se vÃ£o as engrenagens ğŸ’¨
truck.unshift(); // Reduziu para a marcha 2
// LÃ¡ se vÃ£o as engrenagens ğŸ’¨
truck.unshift(); // Reduziu para a marcha 1
// 'TA PEGANU FOGO BIXO ğŸ’¥ğŸ’¥'
